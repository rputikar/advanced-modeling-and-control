---
title: "Session 1. Getting started with MATLAB/ Simulink"
date: 2023-07-08
format:
  pdf
date-modified: 2025-07-21
---

| ||
| -|-|
| **General functions**: ||
| `help/ helpwin`| Help for functions in Command Window. Use `helpwin` for MATLAB file help displayed in a window|
| `cd`| Change current working directory.|
| `demo`|  Launch the demo (introduction).|
| `dir/ what`| List folder. Use `what` to list MATLAB-specific files in directory.|
| `load`| Load data from MAT-file into workspace.|
| `lookfor`| Search for keyword in reference page text.|
| `print`|Print or save a figure or model.|
| `quit`| Quit MATLAB session.|
| `save`|Save workspace variables to file.|
| `who/ whos`| List current variables. Use `whos` for long form version of the list|
| **Calculation functions**: ||
| `conv`|Convolution and polynomial multiplication.|
| `size, length`| Size of an array, length of a vector|
| **Plotting functions**:||
| `axis`| Control axis scaling and appearance.|
| `grid`| Add grid to plot|
| `hold`| Hold a figure to add more plots (curves)|
| `legend`| Add legend to plot|
| `plot`| Linear plot|
| `text (gtext)`| Add text (graphical control) to plot|
| `title`| Add title to plot|
| `xlabel, ylabel`| Add axis labels to plot|
| **Partial fraction and transfer functions**: ||
| `poly` | Construct a polynomial from its roots |
| `residue` |  Partial-fraction expansion |
| `roots` | Find the roots to a polynomial |
| `tf2zp` | Transfer function to zero-pole form conversion |
| `zp2tf` | Zero-pole form to transfer function conversion |
| `tf` | Create a transfer function object |
| `get` | Listthe objectproperties |
| `pole` | Find the poles of a transfer function |
| `zpk` | Create a transfer function in pole-zero-gain form |

: Useful functions {#tbl-useful-functions}

::: {.callout-tip collapse="true"}
## Solution

The code demonstrating plotting functions is available in [Matlab file](./plotting_example.m)/ [mlx file](./plotting_example.mlx).

The code demonstrating partial fractions and transfer functions is available in [Matlab file](./partial_fraction_and_tf_example.m)/ [mlx file](./partial_fraction_and_tf_example.mlx).
:::



## Activities

1. Explore MATLAB user interface

2. Define a vector `x = [1 2 3 4 5 6 7 8 9 10]`. 

   What are different ways you can define x? What happens when you put ; at the end?

3. Convert vector `x` into a column vector.

4. Create vector `y = [0, 0.1, 0.2, ...., 2.0]`

5. Create a 3 x 3 matrix.

6. Print the size of the matrix and lengths of vectors defined so far. 

7. Define 3 polynomials 

   $$p_1(s) = s^2 - 5s + 4$${#eq-1} 
   
   $$p_2(s) = s^2 + 4$${#eq-2}

   $$p_3(s) = s^2 - 5s$${#eq-3}

8. Calculate $p_1(s)p_2(s)$

9. Perform some mathematical computations on the vectors, matrices, and
   polynomials defined so far. 

::: {.callout-tip collapse="true"}
## Solution

```matlab

%% 2. Define a vector x in different ways
x1 = [1 2 3 4 5 6 7 8 9 10];      % explicit entry
x2 = 1:10;                        % using colon operator
x3 = linspace(1, 10, 10);         % using linspace
x = x1;                           % we'll use x1 as the main vector

% Semicolon at end suppresses output to console
% Without ;, MATLAB prints the result
x2                                % prints output
x3;                               % suppresses output

%% 3. Convert vector x into a column vector
x_col = x(:);

% Convert column vector to a row vector
% Transpose operator `'`
x_row = x_col';

% `reshape` function
x_row = reshape(x_col, 1, []);
 
%% 4. Create vector y = [0, 0.1, ..., 2.0]
y = 0:0.1:2.0;

%% 5. Create a 3 x 3 matrix
A = [1 2 3; 4 5 6; 7 8 9];

%% 6. Print size of matrix and lengths of vectors
disp('Size of matrix A:')
disp(size(A))

disp('Length of vector x:')
disp(length(x))

disp('Length of vector y:')
disp(length(y))

%% 7. Define 3 polynomials
% p1(s) = s^2 - 5s + 4
% p2(s) = s^2 + 0s + 4
% p3(s) = s^2 - 5s

p1 = [1 -5 4];
p2 = [1 0 4];
p3 = [1 -5 0];

%% 8. Calculate p1(s) * p2(s)
p12 = conv(p1, p2);

disp('Product polynomial p1 * p2:')
disp(p12)

%% 9. Perform some computations
sum_xy = x + y(1:length(x));           % add two vectors (element-wise)
scaled_A = 2 * A;                      % scale matrix A
polyval_p3 = polyval(p3, x);           % evaluate p3 at each x

disp('Sum of vectors x and y:')
disp(sum_xy)

disp('Matrix A scaled by 2:')
disp(scaled_A)

disp('p3(x) evaluated at x:')
disp(polyval_p3)

```
:::


10. Solve **Ax = b**

    `A = [ 4 -2 -10; 2 10 -12; -4 -6 16];`

    `b = [-10; 32; -16];`

11. Check the solution

12. Calculate eigenvalues and eigenvectors. 

::: {.callout-tip collapse="true"}
## Solution

```matlab
A = [ 4  -2 -10;
      2  10 -12;
     -4  -6  16];

b = [-10; 32; -16];

x = A \ b;

%% Compute eigenvalues and eigenvectors
[ev, l] = eig(A)

% ev is a matrix whose columns are the corresponding eigenvectors
% l is a diagonal matrix with eigenvalues of A on the diagonal

% verify : A*ev = l*ev

% If any eigenvalue has a positive real part, the system is unstable.
``` 
:::

13. Consider data:

    `x = [ 0 1 2 4 6 10];`

    `y = [ 1 7 23 109 307 1231];`

    Fit a third-order polynomial. Plot the results

14. Explore MATLAB plotting capabilities 

15. Create a MATLAB script, save, and load it to plot data in item 13. 

::: {.callout-tip collapse="true"}
## Solution

[Problem 13 - 15](./prob13.m).

:::

16. Find roots of polynomial defined by `p = [1 5 4]`

17. Search for a function to find roots of a nonlinear equation.

18. Find polynomial for the roots (-4, -1) 

19. For the following transfer functions find partial fractions.

   $$G(s) = \frac{q(s)}{p(s)}=\frac{2}{s^2+5s+4}$${#eq-4}

   $$G(s) = =\frac{2}{s (s + 1) (s + 2) (s + 3)}$${#eq-5}

   $$G(s) = =\frac{s^3 + 4s + 3}{s^4 - 7s^3 + 11s^2 + 7s -12}$${#eq-6}

::: {.callout-tip collapse="true"}
## Solution

```matlab

% $$G(s) = \frac{q(s)}{p(s)}=\frac{2}{s^2+5s+4}$${#eq-4}
num = 2;
den = [1 5 4];

[r, p, k] = residue(num, den)

% $$G(s) = =\frac{2}{s (s + 1) (s + 2) (s + 3)}$${#eq-5}
num = 2;

factors = {[1 0], [1 1], [1 2], [1 3]};

den = factors{1};
for k = 2:length(factors)
    den = conv(den, factors{k});
end

[r, p, k] = residue(num, den)



% $$G(s) = =\frac{s^3 + 4s + 3}{s^4 - 7s^3 + 11s^2 + 7s -12}$${#eq-6}

num3 = [1 0 4 3];
den3 = [1 -7 11 7 -12];

[r, p, k] = residue(num, den)
```
:::

20. Have fun with `zp2tf`, `tf2zp`, and `tf` commands

21. Response of first order system: Compute and plot step response of following
    first order systems

    $$y(s) = \frac{1}{5s + 1}$${#eq-p21-1}
    $$y(s) = \frac{5e^{-10s}}{2.5s + 1}$${#eq-p21-2}

:::{.callout-tip collapse="true"}

```matlab

%% First order system
% System 1: y(s) = 1 / (5s + 1)
num1 = 1;
den1 = [5 1];
sys1 = tf(num1, den1);

% System 2: y(s) = (5 * e^{-10s}) / (2.5s + 1)
num2 = 5;
den2 = [2.5 1];
delay = 10;  % Delay in seconds
sys2 = tf(5, [2.5 1], 'InputDelay', 10);

% Plot step responses
figure;
step(sys1, 'b', sys2, 'r--', 0:0.1:100);
legend('sys1', 'sys2');
xlabel('Time (s)');
ylabel('Response');
title('Step Response of First-Order Systems');
grid on;

```
:::

22. Response of second order system: Compute and plot step response of following
    second order system. Show effect of $\xi$ on response.
  
    $$ G_p(s) = \frac{Y(s)}{U(s)} = \frac{K_p e^{-\theta s}}{\tau^2 s^2 + 2 \xi \tau s + 1}$${#eq-p22}

    $K_p = 1$; $\tau = 1$; $\theta = 10$

::: {.callout-tip collapse="true"}
## Solution

[Problem 22](./prob22.m).

:::


23. Solve differential equations using Simulink

a)  An object falling under gravity

  $$\frac{d^2 y}{dt^2}=-g$${#eq-7}

  Compare the result with analytical solution $y = -gt^2/2$

b)  Systems of ODEs

1.  $$\frac{d^2 y}{dt^2} + 2\frac{dy}{dt} + 5y = 1$${#eq-8}

    $$\dot{y}(0) = y(0) = 0$${#eq-9}

2. $$
      \begin{bmatrix} 
        \dot{x}  \\
        \dot{y} 
      \end{bmatrix}
    =
      \begin{bmatrix} 
       1  \\
       0 
      \end{bmatrix}
      +
      \begin{bmatrix} 
       -2 & -5  \\
        1 &  0 
      \end{bmatrix}
      \begin{bmatrix} 
        x  \\
        y 
      \end{bmatrix}
   $${#eq-10}

::: {.callout-tip collapse="true"}
## Solution

[Problem 23](./prob23.slx).

:::
